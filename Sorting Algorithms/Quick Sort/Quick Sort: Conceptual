Introduction to Quicksort
Quicksort is an efficient recursive algorithm for sorting arrays or lists of values. The algorithm is a comparison sort, where values are ordered by a comparison operation such as > or <.

Quicksort uses a divide and conquer strategy, breaking the problem into smaller sub-problems until the solution is so clear there’s nothing to solve.

The problem: many values in the array which are out of order.

The solution: break the array into sub-arrays containing at most one element. One element is sorted by default!

We choose a single pivot element from the list. Every other element is compared with the pivot, which partitions the array into three groups.

A sub-array of elements smaller than the pivot.
The pivot itself.
A sub-array of elements greater than the pivot.
The process is repeated on the sub-arrays until they contain zero or one element. Elements in the “smaller than” group are never compared with elements in the “greater than” group. If the smaller and greater groupings are roughly equal, this cuts the problem in half with each partition step!

[6,5,2,1,9,3,8,7]
6 # The pivot
[5, 2, 1, 3] # lesser than 6
[9, 8, 7] # greater than 6
 
 
[5,2,1,3]  # these values
# will never be compared with 
[9,8,7] # these values
Depending on the implementation, the sub-arrays of one element each are recombined into a new array with sorted ordering, or values within the original array are swapped in-place, producing a sorted mutation of the original array.



Quicksort Runtime
The key to Quicksort’s runtime efficiency is the division of the array. The array is partitioned according to comparisons with the pivot element, so which pivot is the optimal choice to produce sub-arrays of roughly equal length?

The graphic displays two data sets which always use the first element as the pivot. Notice how many more steps are required when the quicksort algorithm is run on an already sorted input. The partition step of the algorithm hardly divides the array at all!

The worst case occurs when we have an imbalanced partition like when the first element is continually chosen in a sorted data-set.

One popular strategy is to select a random element as the pivot for each step. The benefit is that no particular data set can be chosen ahead of time to make the algorithm perform poorly.

Another popular strategy is to take the first, middle, and last elements of the array and choose the median element as the pivot. The benefit is that the division of the array tends to be more uniform.

Quicksort is an unusual algorithm in that the worst case runtime is O(N^2), but the average case is O(N * logN).

We typically only discuss the worst case when talking about an algorithm’s runtime, but for Quicksort it’s so uncommon that we generally refer to it as O(N * logN).



Quicksort Review
Quicksort is an efficient algorithm for sorting values in a list. A single element, the pivot, is chosen from the list. All the remaining values are partitioned into two sub-lists containing the values smaller than and greater than the pivot element.

Ideally, this process of dividing the array will produce sub-lists of nearly equal length, otherwise, the runtime of the algorithm suffers.

When the dividing step returns sub-lists that have one or less elements, each sub-list is sorted. The sub-lists are recombined, or swaps are made in the original array, to produce a sorted list of values.

Instructions
Quicksort is a classic sorting algorithm with an excellent average runtime. Understanding the strategy behind quicksort will improve your ability to reason about sorting algorithms.



Partitioning Part I - The Pivot Element
Partitioning is the crux of the quicksort algorithm. Without it, we wouldn’t know how to split our unsorted array into useful partitions.

This procedure utilizes two internal indices, leftIndex and rightIndex that move in opposite directions. These indices are used for:

computing the pivot element
comparing the elements located at each index with the pivot element
determining the pivot index, the desired location of the pivot element in the set after elements have been swapped, if any
The basic idea of partitioning is as follows:

Start with the middle element
While you haven’t looked through the whole array (leftIndex is still < rightIndex)
move leftIndex up until you find something greater than the pivot
move rightIndex down until you find something less than the pivot
swap those elements, and move the indices in by one step so to continue checking if swaps are necessary
return the last left element index
An initial pivot element can be arbitrarily chosen in the beginning of the partitioning process to be one of the following by default:

first element of the array
last element of the array
middle element of the array
random element of the array
The final location of the pivot element will be determined at the end of the partitioning process.

In some quicksort implementations, the first or last element is commonly picked as the pivot element. In our JavaScript implementation, we will use the middle element instead because it provides a better average runtime. To do this, we will need both leftIndex and rightIndex.

pivot = the average of the sum of leftIndex and rightIndex rounded down





Partitioning Part II - The Left and Right Indices
The leftIndex and rightIndex of a set or subset are going to set the bounds of the partition. For the first iteration, both indices mark the entire span of the original data set. In the following illustrations, L and R represent leftIndex and rightIndex respectively.

[ 3, 1, 4, 2, 8, 9 ]
  L     P        R
The pivot element for this set will be 4 as it is located near the halfpoint of the data set and indicated by P.

Next, we want to compare the element at leftIndex with the pivot element, 4. As long as it is less than the pivot, meaning that it is in the correct half of the partition, we want to move the leftIndex forward one step to the right.

3 < 4, move L forward
[ 3, 1, 4, 2, 8, 9 ]
     L  P        R
1 < 4, move L forward
[ 3, 1, 4, 2, 8, 9 ]
        L        R
        P
4 = 4, stop
We stop leftIndex at position 2 because the element at index 2 (4) is not less than the pivot element 4. Next, we switch focus to the rightIndex and compare the element at rightIndex with the pivot element, 4. As long as it is greater than the pivot, we want to move the rightIndex backward one step to the left.

[ 3, 1, 4, 2, 8, 9 ]
        L        R
        P
9 > 4, move R backward
[ 3, 1, 4, 2, 8, 9 ]
        L     R
        P
8 > 4, move R backward
[ 3, 1, 4, 2, 8, 9 ]
        L  R
        P
2 < 4, stop
We stop the rightIndex at position 3 because the element at 3 (2) is not greater than the pivot element 4. This tells us that 2 does not belong in its current position because it should be on the left of the pivot element 4. In this case, we need to swap the elements at leftIndex and rightIndex.



Partitioning Part III - Swapping
Recall that our leftIndex and rightIndex were at 2 and 3 respectively. They cannot move any further because their respective elements are greater than or less than the pivot element. When this happens, we need to swap those elements so that they will end up at the correct side of the partition.

[ 3, 1, 4, 2, 8, 9 ]
        L  R
        P
swap 4 and 2
[ 3, 1, 2, 4, 8, 9 ]
        L  R
        P
After we swap them, we move L forward and R backward.

Move L forward and R backward
[ 3, 1, 2, 4, 8, 9 ]
        R  L
        P
We return to our outer while loop condition to check if leftIndex (3) is less than or equal to rightIndex (2). In this case, 3 > 2, so we exit the while loop.

At this juncture, the elements that are less than the pivot are to the left of it and the elements that are greater than the pivot are to the right of it. We can stop partitioning and return the leftIndex which points to the pivot element 4. Hence, our pivot index is 3 which is also the leftIndex.



Recursive Quicksort
Now that we have finished implementing partition(), let’s implement the quicksort() function, which is recursive. This function takes in three parameters:

Input array
Left pointer
Right pointer
The base case for this function is when the array has one element, meaning that it is sorted. As a result, the array is returned. Our JavaScript implementation does in-place sorting, hence, the array size does not change. A one-element array is symbolized by both left and right pointers pointing to the same element.

Our quicksort() function will start by calling the partition() function with the input array bounded by the left and right pointers as long as the left pointer is less than the right pointer.

The recursive steps are executed after partitioning:

Call quicksort() to process only the left partition bounded by the left pointer and (pivot index - 1) to exclude the pivot element from the left partition
Call quicksort() to process only the right partition bounded by the pivot index and right pointer
Continuing from the example in the last exercise, recall that we returned a pivot index, P, that points to pivot element 4 at index 3 as pointed to by L.

[ 3, 1, 2, 4, 8, 9 ]
        R  L
           P
Recall that the initial left pointer, which we will call leftBound is 0 and the initial right pointer, rightBound, is 5.

Recursively call quicksort() with the array [ 3, 1, 2, 4, 8, 9 ], left pointer 0 and right pointer 2 for the left partition [ 3, 1, 2 ] which excludes the pivot index, 3.

Similarly, we will recursively call quicksort() with the array [ 3, 1, 2, 4, 8, 9 ], left pointer 3 and right pointer 5 for the right partition [ 4, 8, 9 ] which includes the pivot index, 3.