What Is A Merge Sort?
Merge sort is a sorting algorithm created by John von Neumann in 1945. Merge sort’s “killer app” was the strategy that breaks the list-to-be-sorted into smaller parts, sometimes called a divide-and-conquer algorithm.

In a divide-and-conquer algorithm, the data is continually broken down into smaller elements until sorting them becomes really simple.

Merge sort was the first of many sorts that use this strategy, and is still in use today in many different applications.


How To Merge Sort:
Merge sorting takes two steps: splitting the data into “runs” or smaller components, and the re-combining those runs into sorted lists (the “merge”).

When splitting the data, we divide the input to our sort in half. We then recursively call the sort on each of those halves, which cuts the halves into quarters. This process continues until all of the lists contain only a single element. Then we begin merging.

When merging two single-element lists, we check if the first element is smaller or larger than the other. Then we return the two-element list with the smaller element followed by the larger element.


Merging
When merging larger pre-sorted lists, we build the list similarly to how we did with single-element lists.

Let’s call the two lists left and right. Bothleft and right are already sorted. We want to combine them (to merge them) into a larger sorted list, let’s call it both. To accomplish this we’ll need to iterate through both with two indices, left_index and right_index.

At first left_index and right_index both point to the start of their respective lists. left_index points to the smallest element of left (its first element) and right_index points to the smallest element of right.

Compare the elements at left_index and right_index. The smaller of these two elements should be the first element of both because it’s the smallest of both! It’s the smallest of the two smallest values.

Let’s say that smallest value was in left. We continue by incrementing left_index to point to the next-smallest value in left. Then we compare the 2nd smallest value in left against the smallest value of right. Whichever is smaller of these two is now the 2nd smallest value of both.

This process of “look at the two next-smallest elements of each list and add the smaller one to our resulting list” continues on for as long as both lists have elements to compare. 
Once one list is exhausted, say every element from left has been added to the result, then we know that all the elements of the other list, right, should go at the end of the resulting list (they’re larger than every element we’ve added so far).


Merge Sort Performance
Merge sort was unique for its time in that the best, worst, and average time complexity are all the same: Θ(N*log(N)). This means an almost-sorted list will take the same amount of time as a completely out-of-order list. This is acceptable because the worst-case scenario, where a sort could stand to take the most time, is as fast as a sorting algorithm can be.

Some sorts attempt to improve upon the merge sort by first inspecting the input and looking for “runs” that are already pre-sorted. Timsort is one such algorithm that attempts to use pre-sorted data in a list to the sorting algorithm’s advantage. If the data is already sorted, Timsort runs in Θ(N) time.

Merge sort also requires space. Each separation requires a temporary array, and so a merge sort would require enough space to save the whole of the input a second time. This means the worst-case space complexity of merge sort is O(N).



Introduction
In this lesson, you will learn how to implement the merge sort algorithm in JavaScript. The algorithm consists of two distinct steps:

Splitting the input array – The algorithm recursively splits the input array until each element is in its own array. This portion of the algorithm is represented in the top half of the image to the right.
Merging sorted arrays – The algorithm compares and combines the elements of arrays until the input array is sorted. This is shown in the bottom half of the image.



Splitting: Base Case
In this implementation of merge sort, you will build a recursive function, called mergeSort(), that splits the input array until each element is in its own array. 

So, if the input array is:

[3, 5, 2]
splitting these elements into their own arrays will look like:

[3]
[5]
[2]
The base case of this recursive function is when the input array has only one element in it. Below is a pseudocode implementation of the base case:

function mergeSort(arr)
  if the length of arr equals 1
    return arr



Splitting: Recursive Case
The recursive case of our mergeSort() function requires that we first split the input array into a leftArray and rightArray:

function mergeSort(arr)
  if the length of arr equals 1
    return arr

  midIndex = the floor integer of (left + right) / 2
  leftArr = arr from 0 to midIndex
  rightArr = arr from midIndex to end
In the example above, the leftArray is equal to the input arr from 0 to the middle index. The right array is from the middle index to the end.

Next, we pass the left and right arrays into the mergeSort() function:

function mergeSort(arr)
  if the length of arr equals 1
    return arr

  midIndex = the floor integer of (left + right) / 2
  leftArray = arr from 0 to midIndex
  rightArray = arr from midIndex to end

  mergeSort(leftArray)
  mergeSort(rightArray)
This is our recursive call.



Call merge() from mergeSort()
At this point, we have a function that recursively splits the input array until each element is in a single-element array. The final step is to call the function that is responsible for merging the leftArray and rightArray.

function mergeSort(arr)
  if the length of arr equals 1
    return arr

  midIndex = the floor integer of (left + right) / 2
  leftArray = arr from 0 to midIndex
  rightArray = arr from midIndex to end

  return merge(mergeSort(leftArray), mergeSort(rightArray))
In the last line of the pseudocode, we call a function named merge(). In the next exercise, you will implement a merge() function that combines the sorted leftArray and rightArray halves into a larger sorted array.



Merging
Now, let’s turn our attention to the merge() function. First, let’s think about its arguments and what it returns:

Arguments: two sorted lists as inputs (leftArray and rightArray)
Returns: a sorted list with the elements of leftArray and rightArray combined. We will call this new array sortedArray
Let’s break the implementation of this function into three parts:

Create a while loop that continues while there are still elements in leftArray and rightArray.
function merge(leftArray, rightArray)
  sortedArray = []
  while leftArray and rightArray have a length greater than 0
    // Do something

  return sortedArray
Create conditions that adds an element to sortedArray with each loop.
function merge(leftArr, rightArr)
  sortedArray = []
  while leftArray and rightArray have a length greater than 0
    if leftArray[0] is less than rightArray[0]
      push leftArray[0] onto sortedArray
      remove leftArray[0] from leftArray
    else 
      push rightArray[0] onto sortedArray
      remove rightArray[0] from rightArray
This code will add the smaller number, between leftArray[0] and rightArray[0] to the new array. Then, it will remove that number from the array.

Return sortedArray, with leftArray and rightArray concatenated.
function merge(leftArr, rightArr)
  sortedArray = []
  while leftArray and rightArray have a length greater than 0
    if leftArray[0] is less than rightArray[0]
      push leftArray[0] onto sortedArray
      remove leftArray[0] from leftArray
    else 
      push rightArray[0] onto sortedArray
      remove rightArray[0] from rightArray


  return sortedArray with leftArray and rightArray concatenated
Because the while loop continues until either leftArray or rightArray is empty, you need to concatenate whatever is left in the other array to the sorted array. In JavaScript, it’s easiest to implement this by concatenating both arrays, because the empty array will not alter the original.



Review
Nice work building your own mergeSort() function. An important point to remember about merge sort is that the algorithm is broken into two parts: splitting and merging.

Regardless of the order or length (including odd or even lengths) of an input array, the merge sort algorithm will always split the elements into their own arrays first, and then combine them into a sorted array. 
The fact that the same steps are taken regardless of the input (order and length) results in an average, best, and worst case complexity all equal to the same value, O(n log n).

This time complexity makes merge sort one of the most efficient and popular sorting algorithms. Take a look at merge sort compared to a few others on toptal.com.